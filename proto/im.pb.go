// Code generated by protoc-gen-go.
// source: im.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ImHelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ImHelloRequest) Reset()                    { *m = ImHelloRequest{} }
func (m *ImHelloRequest) String() string            { return proto.CompactTextString(m) }
func (*ImHelloRequest) ProtoMessage()               {}
func (*ImHelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ImHelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ImHelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ImHelloReply) Reset()                    { *m = ImHelloReply{} }
func (m *ImHelloReply) String() string            { return proto.CompactTextString(m) }
func (*ImHelloReply) ProtoMessage()               {}
func (*ImHelloReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ImHelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ImHelloRequest)(nil), "pb.ImHelloRequest")
	proto.RegisterType((*ImHelloReply)(nil), "pb.ImHelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ImServer service

type ImServerClient interface {
	SayHello(ctx context.Context, in *ImHelloRequest, opts ...grpc.CallOption) (*ImHelloReply, error)
}

type imServerClient struct {
	cc *grpc.ClientConn
}

func NewImServerClient(cc *grpc.ClientConn) ImServerClient {
	return &imServerClient{cc}
}

func (c *imServerClient) SayHello(ctx context.Context, in *ImHelloRequest, opts ...grpc.CallOption) (*ImHelloReply, error) {
	out := new(ImHelloReply)
	err := grpc.Invoke(ctx, "/pb.ImServer/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImServer service

type ImServerServer interface {
	SayHello(context.Context, *ImHelloRequest) (*ImHelloReply, error)
}

func RegisterImServerServer(s *grpc.Server, srv ImServerServer) {
	s.RegisterService(&_ImServer_serviceDesc, srv)
}

func _ImServer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImServerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ImServer/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImServerServer).SayHello(ctx, req.(*ImHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ImServer",
	HandlerType: (*ImServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ImServer_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im.proto",
}

func init() { proto.RegisterFile("im.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc8, 0xcc, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe1, 0xe2, 0xf3, 0xcc, 0xf5, 0x48,
	0xcd, 0xc9, 0xc9, 0x0f, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x34, 0xb8, 0x78, 0xe0,
	0xaa, 0x0a, 0x72, 0x2a, 0x85, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x61, 0xca,
	0x60, 0x5c, 0x23, 0x3b, 0x2e, 0x0e, 0xcf, 0xdc, 0xe0, 0xd4, 0xa2, 0xb2, 0xd4, 0x22, 0x21, 0x23,
	0x2e, 0x8e, 0xe0, 0xc4, 0x4a, 0xb0, 0x36, 0x21, 0x21, 0xbd, 0x82, 0x24, 0x3d, 0x54, 0x9b, 0xa4,
	0x04, 0x50, 0xc4, 0x0a, 0x72, 0x2a, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x4e, 0x33, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xf4, 0x6a, 0xce, 0x7b, 0xa6, 0x00, 0x00, 0x00,
}
